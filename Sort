public class Sort {
    void BubbleSort(int[] arr){
        for (int j = 0; j < arr.length; j++) 
            for (int i = 0; i < arr.length-1; i++) 
                if(arr[i] > arr[i+1])
                    swap(arr, i, i+1);
    }
    
    void SelectionSort(int[] arr){
        for (int i = 0; i < arr.length - 1; i++) {
            int MIN_Indx = i;
            for (int j = i + 1; j < arr.length; j++) {
                if(arr[MIN_Indx] > arr[j])
                    MIN_Indx = j;
            }
            if(MIN_Indx != i) 
                swap(arr, i, MIN_Indx);
        }
    }
    void InsertionSort(int arr[]){
        for (int i = 1; i < arr.length; i++) {
            int temp = arr[i];
            int j = i-1;
            while(j >= 0 && arr[j] > temp){
               arr[j+1] = arr[j];
               j--;
            }
            arr[j+1] = temp;
        }        
    }
    
    void MergeSort(int arr[], int low, int high){
        if(low < high){
            int mid = (low + high) /2;
            MergeSort(arr, low, mid);
            MergeSort(arr, mid + 1, high);
            Merg(arr, low, mid ,high);
        }
    }
    
    private void Merg(int[] arr, int low, int mid, int high) {
        int n1 = mid - low + 1;
        int left[] = new int[n1];
        
        int n2 = high - mid;
        int right[] = new int[n2];
        
        for (int i = 0; i < n1; i++) {
            left[i] = arr[low + i];
        }
        for (int i = 0; i < n2; i++) {
            right[i] = arr[mid+1+i];
        }
        
        int i = 0, j = 0, k = low;
        while(n1 > i || n2 > j){
            if(i < n1 && n2 > j){
                if(left[i] <= right[j])
                    arr[k] = left[i++];
                else
                    arr[k] = right[j++];
                k++;
            }
            else if(n1 > i){
                arr[k++] = left[i++];
            }
            else if(n2 > j){
                arr[k++] = right[j++];
            }
        }
    }
    
    
    void QuickSort(int []arr, int low, int high){
        if(low < high){
            int pivot = partition(arr,low,high);
            QuickSort(arr, low, pivot - 1);
            QuickSort(arr, pivot + 1, high);
        }
    }

    private int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        
        for (int j = low; j < high; j++) {
            if(arr[j] <= pivot){
                i++;
                swap(arr, i, j);
            }
        }
        
        swap(arr, i + 1, high);
        return i + 1;
    }
    
    void HeapSort(int []arr){
        int n = arr.length;
        
        for(int i = n / 2 - 1; i >= 0; i--){
            heapify(arr, n ,i);
        }
        
        for(int i = n - 1; i > 0; i--){
            swap(arr,0, i);
            heapify(arr, i, 0);
        }
    }

    private void heapify(int[] arr, int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        
        if(left < n && arr[left] > arr[largest])
            largest = left;
        if(right < n && arr[right] > arr[largest])
            largest = right;
        
        if(largest != i){
            swap(arr, i, largest);
            heapify(arr, n, largest);
        }
    }
    
    void PrintHeapArray(int []arr){
        for (int i = 0; i < arr.length; i++) 
            System.out.print(arr[i]+" ");
        System.out.println("");
    }
    
    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
}
